<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<title>dbParallel WikiPage Home</title>
</head>
<body>
	<p>
		<b>Project Description</b><br />
		The dbParallel is a Database Task Parallel Foundation that provides database developers an application level support for
		parallel programming. Being distinct from Oracle 11g R2's DBMS_PARALLEL_EXECUTE parallelism within a query by chunks, dbParallel
		works more like a .NET Task Parallel Library implemented on database side, it handles the partitioning of the asynchronous
		job, the scheduling of tasks, state management, and other low-level details in a lightweight implement which using about
		eight hundred lines of SQL code and one thousand lines of C# code in total (except test code).</p>
	<p>
		<b>Get started</b><br />
		A quick example (for Oracle Version)</p>
	<div>
		<pre><span style="color: blue;">PROCEDURE</span> TEST_1
<span style="color: blue;">AS</span>
    tPJob_ID    PLS_INTEGER;
    tSQL        VARCHAR2(256);
<span style="color: blue;">BEGIN</span>
    tPJob_ID := XYZ.TPW_CALL.CREATE_PJOB(<span style="color: #a31515;">'App1'</span>, <span style="color: #a31515;">'User1'</span>, <span
		style="color: #a31515;">'This is test1.'</span>);

    tSQL := UTL_LMS.FORMAT_MESSAGE(<span style="color: #a31515;">'DBMS_LOCK.SLEEP(%d)'</span>, 10);
    XYZ.TPW_CALL.ADD_TASK(tPJob_ID, tSQL, 60, <span style="color: #a31515;">'Task1 sleep for 10 seconds.'</span>);
    
    tSQL := UTL_LMS.FORMAT_MESSAGE(<span style="color: #a31515;">'DBMS_LOCK.SLEEP(%d)'</span>, 70);
    XYZ.TPW_CALL.ADD_TASK(tPJob_ID, tSQL, 60, <span style="color: #a31515;">'Task2 sleep for 70 seconds.'</span>);

    tSQL := UTL_LMS.FORMAT_MESSAGE(<span style="color: #a31515;">'DBMS_LOCK.SLEEP(%d)'</span>, 30);
    XYZ.TPW_CALL.ADD_TASK(tPJob_ID, tSQL, 60, <span style="color: #a31515;">'Task3 sleep for 30 seconds.'</span>);

    tSQL := UTL_LMS.FORMAT_MESSAGE(<span style="color: #a31515;">'DBMS_LOCK.SLEEP(%d)'</span>, 70);
    XYZ.TPW_CALL.ADD_TASK(tPJob_ID, tSQL, 120, <span style="color: #a31515;">'Task4 sleep for 70 seconds.'</span>);

    tSQL := UTL_LMS.FORMAT_MESSAGE(<span style="color: #a31515;">'DBMS_LOCK.SLEEP(%d)'</span>, 15);
    XYZ.TPW_CALL.ADD_CALLBACK_FOR_SUCCESS(tPJob_ID, tSQL, 180, <span style="color: #a31515;">'Sleep for 15s if all success.'</span>);

    tSQL := UTL_LMS.FORMAT_MESSAGE(<span style="color: #a31515;">'DBMS_LOCK.SLEEP(%d)'</span>, 25);
    XYZ.TPW_CALL.ADD_CALLBACK_FOR_FAIL(tPJob_ID, tSQL, 180, <span style="color: #a31515;">'Sleep for 25s if fail.'</span>);

    XYZ.TPW_CALL.START_PJOB(tPJob_ID);

    DBMS_OUTPUT.PUT_LINE(<span style="color: #a31515;">'New PJob_ID#'</span> || tPJob_ID);
<span style="color: blue;">END</span> TEST_1;</pre>
	</div>
	<p>
		The example executes Task1-4 in parallel and when everything is finished, the callback task is executed <i>(in this case callback
			will be a fail since task 2 failed - timeout)</i>.<br />
		<img style="vertical-align: middle;" src="http://www.codeplex.com/Download?ProjectName=dbparallel&amp;DownloadId=370939"
			alt="" width="635" height="230" /></p>
	<p>
		<b>Features</b><br />
		Following API list of current version reflects the features:</p>
	<ol>
		<li>XYZ.TPW_CALL.CREATE_PJOB<br />
			Each of the above sample processing units are called a PJob. PJob represents an asynchronous operation. This method returns
			a pJob Id for below methods (2, 3, 4, 5, 6).</li>
		<li>XYZ.TPW_CALL.ADD_TASK<br />
			Each pJob contains one or more parallel tasks. Each task is a dynamic SQL. Call the ADD_TASK multiple times to add every
			parallel tasks into the pJob.</li>
		<li>XYZ.TPW_CALL.ADD_CALLBACK_FOR_SUCCESS<br />
			This is a optional method. Since a pJob is asynchronous, the callback Task is called to execute a continuation when all
			the parallel Tasks successfully completed. </li>
		<li>XYZ.TPW_CALL.ADD_CALLBACK_FOR_FAIL<br />
			This is a optional method. Similar but opposite to previous callback for success, the callback Task for fail is called to
			execute a continuation when all the parallel Tasks completed but any of them throw out database exception(s).</li>
		<li>XYZ.TPW_CALL.START_PJOB<br />
			Starts the pJob, scheduling it for execution.</li>
		<li>XYZ.TPW_CALL.TRY_CANCEL_PJOB<br />
			Try to cancel a scheduled pJob if it hasn't begin to execute.</li>
		<li>XYZ.TPW_CALL.START_NEW_SINGLE_TASK<br />
			This method encapsulates a series of steps for conveniently creating and starting single task and callback task.</li>
	</ol>
	<p>
		(XYZ is the schema name, it should be replaced by your schema name)</p>
	<p>
		Open the source code of Oracle package TPW_CALL <i>(or SQL Server stored procedures with prefix TPW_CALL_)</i> for detail
		parameters.</p>
	<p>
		<b>How It's Made</b></p>
	<ul>
		<li><u>Database Side</u><br />
			Each pJob is added into the Scheduler, and then the State Manager controls every stage in the lifecycle of the pJob.</li>
		<li><u>Windows Service Side</u><br />
			At least one Pump Service must reside in Windows Services (or other hosting environment) act as a dispatcher, as shown in
			the following figure:</li>
	</ul>
	<p style="padding-left: 30px;">
		<img style="vertical-align: middle;" src="http://www.codeplex.com/Download?ProjectName=dbparallel&amp;DownloadId=371725"
			alt="" width="671" height="349" /></p>
	<p style="padding-left: 30px;">
		The dispatcher executes each of the provided tasks, possibly in parallel. No guarantees are made about the order in which
		the tasks execute or how many degree of parallelism. All tuning settings are located in TPW_PUMP_CONFIG table.<br />
		Each Task of a pJob is actually executed in the database through its separate connection. In other words, each Task runs
		in a different database session. Temporary table and transaction can not be expected to cross Tasks.</p>
	<p style="padding-left: 30px;">
		<i><u>Service Mode</u> - (Primary Mode | Standby Mode)</i></p>
	<p style="padding-left: 30px;">
		A Pump Service always starts up in Standby Mode. Multiple Standby Services can keep running for the same database, one of
		them will switch to Primary Mode when none Primary Service is active.</p>
	<p style="padding-left: 150px;">
		<img style="vertical-align: middle;" src="http://www.codeplex.com/Download?ProjectName=dbparallel&amp;DownloadId=371727"
			alt="" width="577" height="387" /></p>
	<p>
		<b>Security Model</b></p>
	<ul>
		<li>To create or operate a pJob:<br />
			The user must have EXECUTE privilege on the package TPW_CALL - for Oracle version;<br />
			<i>(Underlying stored procedures with prefix of "TPW_CALL_" for SQL Server version)</i> </li>
		<li>To execute Task's SQL:<br />
			As a ultimate executor, the security account of Pump Service must have privileges to execute Tasks' SQL.</li>
	</ul>
	<p>
		<b>Applicability</b></p>
	<p style="padding-left: 30px;">
		The original intention of dbParallel is designed for time consuming database processing with one or more independent tasks
		can run concurrently. Not all processing is suitable for parallelization; for example, if a batch job performs only a small
		amount of work on each subtask, or it doesn't run for more than one second, then the overhead of parallelization can cause
		the processing to run more slowly. Besides, some special attention (e.g. locks, deadlocks, and race conditions) can not
		be ignored.</p>
	<p>
		<b>System Requirements</b></p>
	<ul>
		<li>Supported Databases:<br />
			- Oracle (dev and test on version 11g R1 and R2, hasn't try on earlier version);<br />
			- SQL Server 2005 or later version;</li>
		<li>Windows Service:<br />
			.NET Framework 4.0 Client Profile</li>
		<li>ADO.NET Provider:<br />
			- Oracle - <i>DataDirect Connect for ADO.NET v3.5 (the provider can be easily replaced by other provider for Oracle with the
				source code)</i><br />
			- SQL Server - .NET Framework build-in SqlClient provider.</li>
	</ul>
	<p style="padding-left: 30px;">
		At present the dbParallel only support Oracle and SQL Server.</p>
	<p>
		<b>Contribute</b></p>
	<ul>
		<li>Welcome all feedback through the CodePlex project (through comments, patches, or items in the Issue Tracker);</li>
		<li>Earnestly request adding support for other databases;</li>
	</ul>
	<p>
		<b>Support</b></p>
	<p style="padding-left: 30px;">
		Feel free to use the source in your apps, and products.<br />
		For production support, please mark [PROD] in email subject to <a href="mailto:abelcys@gmail.com">abelcys@gmail.com</a>.<br />
		This project is developed in personal time, the source code support can be available only at night - Easten Time (US &amp;
		Canada).</p>
	<p style="padding-left: 30px;">
		No money requested.</p>
</body>
</html>
